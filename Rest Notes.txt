REST Framework works on three basic principle
1. Resource - Object in our application like products, cart, collection. We can identify the resource using URLs.
    http://localhost:3000/products
    http://localhost:3000/products/1
    http://localhost:3000/products/1/reviews
    http://localhost:3000/products/1/reviews/1

2. Representation: How we represent our resource to client.
    HTML, XML or JSON
    In server, we represent resources by objects

3. HTTP Methods
   They help in telling the server what to do with the resource
   GET, POST, PUT, PATCH, DELETE
   PUT vs PATCH, if we want to update all the properties(PUT) or subset of property

Installing Django Rest Framework - pip install djangorestframework

* Django Rest framework have objects Request and Response that is analogous
  to HttpResponse and HttpRequest objects from django, which is powerful and easy to use.
  api_view decorator is used to mark a function to use rest.

Aim is to convert Product object -> JSON object
* Serializer converts a model instance to a dictionary.
* JSONRenderer is class in Rest framework which as a method
  render(dict) -> json object.

* API Model(Interface) != Data Model(Implementation)

* Serializing Relationship
    Primary Key
    String
    Nested Object
    Hyperlink

* Model Serializer are used to reduce the effort to write serializer for each model.

* Creating a product (Deserializing objects)
 POST /products

 * For extra validation apart from that is done at model validation level from is_valid method,
    we can override it.

* Class based views are a alternate way of function based views. define get(), post(), put(), delete() function
  inside those classes and change the url patterns accordingly (See this commit).

* Mixin is a class which encapsulates pattern of code.
    ListModelMixin, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin, etc.

* But we don't use them directly. Concreate View classes are used.
  That essentially, combinations of Mixins eg. ListCreateAPIView.

  ListCreateAPIView inherits from ListModelMixin and CreateModelMixin mixins.

  Inorder to use them, need to override two methods get_queryset(), get_serializer_class()

* ViewSet- Set of related views.
  is used to combine similar views ( ProductList and ProductDetail together as ProductViewSet)
  that have common code

*   When using viewset we don't register url patterns
    To register view set routers are used so they generate url patterns for us

* Nested resources are needed for full REST URL structure, if one resource lives inside another.
    The following example is about Domains and DNS Nameservers. There are many domains,
    and each domain has many nameservers. The "nameserver" resource does not exist without a domain,
    so you need it "nested" inside the domain.
    Help: https://github.com/alanjds/drf-nested-routers
    The desired URL signatures are:

    /domain/ <- Domains list
    /domain/{pk}/ <- One domain, from {pk}
    /domain/{domain_pk}/nameservers/ <- Nameservers of domain from {domain_pk}
    /domain/{domain_pk}/nameservers/{pk} <- Specific nameserver from {pk}, of domain from {domain_pk}

    In our case domain is products and nameserver is reviews.
    pipenv install drf-nested-routers

